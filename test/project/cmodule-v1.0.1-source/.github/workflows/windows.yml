name: windows

on:
  pull_request:
    branches: [ "main", "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_CONFIGURATION_TYPES: Debug;Release;RelWithDebInfo;MinSizeRel
  CMAKE_BUILD_TYPE: Release
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - name: Checkout Project
      uses: actions/checkout@v3

    - name: CMake Setup
      uses: jwlawson/actions-setup-cmake@v1.13
      with:
        cmake-version: 'latest'

    - name: Node Setup
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> ${env:GITHUB_OUTPUT}

    - name: Get yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - run: npm install -g yarn@latest
    - run: yarn global add npm@latest
    - run: yarn global add cmake-js@latest
    - run: yarn install
    - run: yarn test -C Debug
    - run: yarn clean
    # - run: yarn pkg:src
    - run: yarn pkg:bin
